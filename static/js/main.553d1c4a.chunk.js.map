{"version":3,"sources":["logo.svg","CustomerDetails.js","Customers.js","registerServiceWorker.js","App.js","RatingsMap.js","index.js"],"names":["CustomerDetails","props","state","this","getCustomerDetails","val","prevProps","id","axios","get","then","response","setState","customerDetails","className","bsStyle","Heading","Title","componentClass","data","name","Body","email","phone","city","country","organization","jobProfile","additionalInfo","Component","Customers","selectedCustomer","getCustomerData","customerList","map","customer","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","colors","split","dark","palette","type","url","getSeason","imdbID","Season","params","apikey","i","CommentForm","rows","show","seasons","onSubmit","handleSubmit","bind","TextField","label","required","inputRef","textarea","body","length","Grid","container","spacing","filter","tile","Poster","item","handleSelect","src","alt","width","columns","key","field","forEach","row","index","style","height","pageSize","onRowSelected","entries","Object","splice","value","numbers","season","Episodes","episode","Episode","imdbRating","push","Math","max","keys","Number","headerName","process","classes","Box","root","Typography","variant","autoHeight","getCellClassName","isNaN","color","ThemeProvider","theme","createMuiTheme","CssBaseline","Form","ImageGridList","RatingsMap","event","title","preventDefault","s","x","Search","getShow","totalSeasons","requests","all","spread","responses","getAll","React","withStyles","padding","backgroundColor","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.553d1c4a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport axios from 'axios'\n\n//This Component is a child Component of Customers Component\nexport default class CustomerDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  //Function which is called when the component loads for the first time\n  componentDidMount() {\n    this.getCustomerDetails(this.props.val)\n  }\n\n  //Function which is called whenver the component is updated\n  componentDidUpdate(prevProps) {\n\n    //get Customer Details only if props has changed\n    if (this.props.val !== prevProps.val) {\n      this.getCustomerDetails(this.props.val)\n    }\n  }\n\n  //Function to Load the customerdetails data from json.\n  getCustomerDetails(id) {\n    axios.get('assets/samplejson/customer' + id + '.json').then(response => {\n      this.setState({customerDetails: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerDetails)\n      return (<p>Loading Data</p>)\n    return (<div className=\"customerdetails\">\n      <Panel bsStyle=\"info\" className=\"centeralign\">\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\">{this.state.customerDetails.data.name}</Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          <p>Name : {this.state.customerDetails.data.name}</p>\n          <p>Email : {this.state.customerDetails.data.email}</p>\n          <p>Phone : {this.state.customerDetails.data.phone}</p>\n          <p>City : {this.state.customerDetails.data.city}</p>\n          <p>State : {this.state.customerDetails.data.state}</p>\n          <p>Country : {this.state.customerDetails.data.country}</p>\n          <p>Organization : {this.state.customerDetails.data.organization}</p>\n          <p>Job Profile : {this.state.customerDetails.data.jobProfile}</p>\n          <p>Additional Info : {this.state.customerDetails.data.additionalInfo}</p>\n        </Panel.Body>\n      </Panel>\n    </div>)\n  }\n}\n","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport Button from 'react-bootstrap/lib/Button'\nimport CustomerDetails from './CustomerDetails'\nimport axios from 'axios'\n\nexport default class Customers extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedCustomer: 1\n    }\n  }\n\n  //function which is called the first time the component loads\n  componentDidMount() {\n    this.getCustomerData();\n  }\n\n  //Function to get the Customer Data from json\n  getCustomerData() {\n    axios.get('assets/samplejson/customerlist.json').then(response => {\n      this.setState({customerList: response})\n    })\n  };\n\n  render() {\n    if (!this.state.customerList)\n      return (<p>Loading data</p>)\n    return (<div className=\"addmargin\">\n      <div className=\"col-md-3\">\n        {\n\n          this.state.customerList.data.map(customer => <Panel bsStyle=\"info\" key={customer.name} className=\"centeralign\">\n            <Panel.Heading>\n              <Panel.Title componentClass=\"h3\">{customer.name}</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body>\n              <p>{customer.email}</p>\n              <p>{customer.phone}</p>\n              <Button bsStyle=\"info\" onClick={() => this.setState({selectedCustomer: customer.id})}>\n\n                Click to View Details\n\n              </Button>\n\n            </Panel.Body>\n          </Panel>)\n        }\n      </div>\n      <div className=\"col-md-6\">\n        <CustomerDetails val={this.state.selectedCustomer}/>\n      </div>\n    </div>)\n  }\n\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Customers from './Customers'\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    console.log(\"Host URL\"+process.env.PUBLIC_URL);\n    return (\n\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Simple React App</h1>\n        </header>\n          <Switch>\n                <Route exact path= \"/\" render={() => (\n                  <Redirect to=\"/customerlist\"/>\n                )}/>\n                 <Route exact path='/customerlist' component={Customers} />\n          </Switch>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport { TextField, Box, Grid, ThemeProvider, CssBaseline, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\n\nvar colors = 'darkGreen green goldenRod darkGoldenRod indianRed fireBrick'.split(' ');\n\nconst useStyles = theme => {\n    var root = { padding: theme.spacing(3) };\n    colors.forEach(color => {\n        root['& .' + color] = { backgroundColor: color };\n    })\n    console.log(root)\n    return { root: root };\n};\n\nexport const dark = {\n    palette: {\n        type: \"dark\"\n    }\n};\n\n// api functions\nconst url = 'https://www.omdbapi.com/';\n\nfunction search(title) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            s: title,\n            type: 'series',\n        }\n    })\n        .then(x => x.data.Search || []);\n}\n\nfunction getShow(imdbID) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            i: imdbID,\n        }\n    })\n        .then(x => x.data || []);\n}\n\nfunction getSeason(imdbID, Season) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            i: imdbID,\n            Season: Season,\n        }\n    });\n}\n\nfunction getAll(imdbID, totalSeasons) {\n    var requests = [];\n    for (var i = 0; i < totalSeasons; i++){\n        requests.push(\n            getSeason(imdbID, i + 1)\n        );\n    }\n    return axios.all(requests)\n        .then(axios.spread( (...responses) => (\n            responses.map(response => response.data) \n        )));\n}\n\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            rows: [],\n            show: {},\n            seasons: [],\n        }\n    }\n\n    // components\n    Form() {\n        return (\n            <form className=\"comment-form\" onSubmit={this.handleSubmit.bind(this)}>\n                <TextField \n                    label=\"Movie or TV Show\"\n                    required\n                    inputRef={(textarea) => this.body = textarea}\n                />\n            </form>\n        );\n    }\n\n    ImageGridList() {\n        if (!this.state.rows.length) {\n            return <div>No Shows</div>\n        }\n        return (\n            <Grid container spacing={1}>\n                {this.state.rows\n                    .filter(tile => tile.Poster !== 'N/A')\n                    .map((tile) => (\n                        <Grid item onClick={() => this.handleSelect(tile.imdbID)}>\n                            <img src={tile.Poster} alt={tile.Title} width={99} />\n                        </Grid>\n                    )\n                )}\n            </Grid>\n        );\n        \n        <Box component=\"div\" display=\"inline\">inline</Box>\n        return this.state.rows\n            .map((tile) => (\n                <Box component=\"div\" display=\"inline\">\n                    <img src={tile.Poster} alt={tile.Title} width={99} />\n                </Box>\n            ));\n    }\n    \n    DataGridDemo() {\n        var rows = this.state.rows;\n        if (!rows.length){\n            return (\n                <div>\n                    No Rows\n                </div>\n            );\n        }\n    \n        var columns = 'id Title Year'.split(' ').map(key => (\n            {\n                field: key,\n                width: 200,\n            }\n        ));\n        \n        rows.forEach((row, index) => row['id'] = index);\n    \n        const data = {\n            rows: rows,\n            columns: columns,\n            pageSize: 5,\n        };\n        \n        return (\n            <div style={{ height: 400, width: '100%' }}>\n                <DataGrid \n                    rows={rows}\n                    columns={columns}\n                    pageSize={5}\n                    onRowSelected={this.handleSelect.bind(this)}\n                />\n            </div>\n        );\n    }\n    \n    PairGrid() {\n        var columns = 'id key value'.split(' ').map(field => (\n            {\n                field: field\n            }\n        ))\n    \n        var fields = 'Title Year Rated Released Runtime Genre Director Writer Actors Plot Awards'\n        \n        var entries = Object.entries(this.state.show);\n        if (!entries.length){\n            return <div></div>;\n        }\n    \n        entries.splice(14, 1);\n        var rows = entries.map( ( [key, value], id) => (\n            {\n                id: id,\n                key: key,\n                value: value,\n            }\n        ));\n    \n        return (\n            <div style={{ height: 400, width: 300 }}>\n                <DataGrid \n                    rows={rows}\n                    columns={columns}\n                />\n            </div>\n        );\n    }\n    \n    process() {\n        var seasons = this.state.seasons;\n        if (!seasons.length){\n            return false;\n        }\n    \n        var rows = []\n        var numbers = [];\n        seasons.forEach(season => {\n            var row = {};\n            const episodes = season.Episodes || [];\n            episodes.forEach(episode => {\n                row[episode.Episode] = episode.imdbRating\n            });\n            rows.push(row);\n    \n            numbers.push(\n                Math.max( ...Object.keys(row).map(Number) )\n            );\n        })\n        \n        var width = 77;\n        var max = Math.max( ...numbers );\n        var columns = [{ \n            field: 'id',\n            headerName: 'Season',\n        }]\n        for (var i = 1; i < max + 1; i++){\n            columns.push({\n                field: i,\n                headerName: 'E' + i,\n            });\n        }\n        \n        rows.forEach((row, index) => row['id'] = index + 1);\n    \n        return {\n            rows: rows,\n            columns: columns,\n        };\n    }\n\n    RatingsMap() {\n        const data = this.process();\n        if (!data){\n            return <div></div>;\n        }\n        \n        const { classes } = this.props;\n        return (\n            <Box className={classes.root}>\n                <Typography variant='h4'>\n                    {this.state.show.Title}\n                </Typography>\n                <DataGrid \n                    {...data}\n                    autoHeight\n                    getCellClassName={(params) => {\n                        if (params.field === 'id' || !params.value || isNaN(params.value)) {\n                            return '';\n                        }\n                        for (const [index, color] of colors.entries()) {\n                            if (Number(params.value) >= (9 - index)) {\n                                return color;\n                            }\n                        }\n                        return colors[colors.length - 1];\n                    }}\n                />\n            </Box>\n        );\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={createMuiTheme(dark)}>\n                <CssBaseline />\n                <div>\n                    {this.Form()}\n                    {this.ImageGridList()}\n                    {this.RatingsMap()}\n                </div>\n            </ThemeProvider>\n        );\n    }\n    \n    // hooks\n    handleSubmit(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        search(this.body.value)\n            .then(x => {\n                this.setState({ rows: x });\n            });\n    }\n    \n    handleSelect(imdbID) {\n        getShow(imdbID)\n            .then(x => {\n                this.setState({ show: x });\n\n                getAll(\n                    this.state.show.imdbID,\n                    Number(this.state.show.totalSeasons),\n                )\n                    .then(x => {\n                        this.setState({ seasons: x });\n                    });\n            });        \n    }\n} // end CommentForm component\n\nexport default withStyles(useStyles)(CommentForm);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport RatingsMap from './RatingsMap'\n\nReactDOM.render(\n    <RatingsMap />,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}