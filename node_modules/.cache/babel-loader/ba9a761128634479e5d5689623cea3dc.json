{"ast":null,"code":"var _jsxFileName = \"/home/gfane/dash/site/src/RatingsMap.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { TextField, Box, Grid, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar colors = 'darkGreen green goldenRod darkGoldenRod indianRed darkRed'.split(' ');\n\nconst useStyles = theme => {\n  var root = {\n    padding: theme.spacing(3)\n  };\n  colors.forEach(color => {\n    root['& .' + color] = {\n      backgroundColor: color\n    };\n  });\n  console.log(root);\n  return {\n    root: root\n  };\n};\n\nexport const dark = {\n  palette: {\n    type: \"dark\"\n  }\n}; // api functions\n\nconst url = 'http://www.omdbapi.com/';\n\nfunction search(title) {\n  return axios.get(url, {\n    params: {\n      apikey: '14f8eef1',\n      s: title,\n      type: 'series'\n    }\n  }).then(x => x.data.Search || []);\n}\n\nfunction getShow(imdbID) {\n  return axios.get(url, {\n    params: {\n      apikey: '14f8eef1',\n      i: imdbID\n    }\n  }).then(x => x.data || []);\n}\n\nfunction getSeason(imdbID, Season) {\n  return axios.get(url, {\n    params: {\n      apikey: '14f8eef1',\n      i: imdbID,\n      Season: Season\n    }\n  });\n}\n\nfunction getAll(imdbID, totalSeasons) {\n  var requests = [];\n\n  for (var i = 0; i < totalSeasons; i++) {\n    requests.push(getSeason(imdbID, i + 1));\n  }\n\n  return axios.all(requests).then(axios.spread((...responses) => responses.map(response => response.data)));\n}\n\nclass CommentForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      show: {},\n      seasons: []\n    };\n  } // components\n\n\n  Form() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comment-form\",\n      onSubmit: this.handleSubmit.bind(this),\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Movie or TV Show\",\n        required: true,\n        inputRef: textarea => this.body = textarea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n  ImageGridList() {\n    if (!this.state.rows.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Shows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: this.state.rows.filter(tile => tile.Poster !== 'N/A').map(tile => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        onClick: () => this.handleSelect(tile.imdbID),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: tile.Poster,\n          alt: tile.Title,\n          width: 99\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n\n    /*#__PURE__*/\n    _jsxDEV(Box, {\n      component: \"div\",\n      display: \"inline\",\n      children: \"inline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this);\n\n    return this.state.rows.map(tile => /*#__PURE__*/_jsxDEV(Box, {\n      component: \"div\",\n      display: \"inline\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: tile.Poster,\n        alt: tile.Title,\n        width: 99\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this));\n  }\n\n  DataGridDemo() {\n    var rows = this.state.rows;\n\n    if (!rows.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this);\n    }\n\n    var columns = 'id Title Year'.split(' ').map(key => ({\n      field: key,\n      width: 200\n    }));\n    rows.forEach((row, index) => row['id'] = index);\n    const data = {\n      rows: rows,\n      columns: columns,\n      pageSize: 5\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 400,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        pageSize: 5,\n        onRowSelected: this.handleSelect.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n  PairGrid() {\n    var columns = 'id key value'.split(' ').map(field => ({\n      field: field\n    }));\n    var fields = 'Title Year Rated Released Runtime Genre Director Writer Actors Plot Awards';\n    var entries = Object.entries(this.state.show);\n\n    if (!entries.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 20\n      }, this);\n    }\n\n    entries.splice(14, 1);\n    var rows = entries.map(([key, value], id) => ({\n      id: id,\n      key: key,\n      value: value\n    }));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 400,\n        width: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n\n  process() {\n    var seasons = this.state.seasons;\n\n    if (!seasons.length) {\n      return false;\n    }\n\n    var rows = [];\n    var numbers = [];\n    seasons.forEach(season => {\n      var row = {};\n      season.Episodes.forEach(episode => {\n        row[episode.Episode] = episode.imdbRating;\n      });\n      rows.push(row);\n      numbers.push(Math.max(...Object.keys(row).map(Number)));\n    });\n    var width = 77;\n    var max = Math.max(...numbers);\n    var columns = [{\n      field: 'id',\n      headerName: 'Season'\n    }];\n\n    for (var i = 1; i < max + 1; i++) {\n      columns.push({\n        field: i,\n        headerName: 'E' + i\n      });\n    }\n\n    rows.forEach((row, index) => row['id'] = index + 1);\n    return {\n      rows: rows,\n      columns: columns\n    };\n  }\n\n  RatingsMap() {\n    const data = this.process();\n\n    if (!data) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(DataGrid, { ...data,\n        autoHeight: true,\n        getCellClassName: params => {\n          if (params.field === 'id' || !params.value || isNaN(params.value)) {\n            return '';\n          }\n\n          for (const [index, color] of colors.entries()) {\n            if (Number(params.value) >= 9 - index) {\n              return color;\n            }\n          }\n\n          return colors[colors.length - 1];\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: createMuiTheme(dark),\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.Form(), this.ImageGridList(), this.RatingsMap()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this);\n  } // hooks\n\n\n  handleSubmit(event) {\n    event.preventDefault(); // prevents page from reloading on submit\n\n    search(this.body.value).then(x => {\n      this.setState({\n        rows: x\n      });\n    });\n  }\n\n  handleSelect(imdbID) {\n    getShow(imdbID).then(x => {\n      this.setState({\n        show: x\n      });\n      getAll(this.state.show.imdbID, Number(this.state.show.totalSeasons)).then(x => {\n        this.setState({\n          seasons: x\n        });\n      });\n    });\n  }\n\n} // end CommentForm component\n\n\nexport default withStyles(useStyles)(CommentForm);","map":{"version":3,"sources":["/home/gfane/dash/site/src/RatingsMap.js"],"names":["React","axios","TextField","Box","Grid","ThemeProvider","CssBaseline","DataGrid","withStyles","createMuiTheme","colors","split","useStyles","theme","root","padding","spacing","forEach","color","backgroundColor","console","log","dark","palette","type","url","search","title","get","params","apikey","s","then","x","data","Search","getShow","imdbID","i","getSeason","Season","getAll","totalSeasons","requests","push","all","spread","responses","map","response","CommentForm","Component","constructor","props","state","rows","show","seasons","Form","handleSubmit","bind","textarea","body","ImageGridList","length","filter","tile","Poster","handleSelect","Title","DataGridDemo","columns","key","field","width","row","index","pageSize","height","PairGrid","fields","entries","Object","splice","value","id","process","numbers","season","Episodes","episode","Episode","imdbRating","Math","max","keys","Number","headerName","RatingsMap","classes","isNaN","render","event","preventDefault","setState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport { TextField, Box, Grid, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\n\nvar colors = 'darkGreen green goldenRod darkGoldenRod indianRed darkRed'.split(' ');\n\nconst useStyles = theme => {\n    var root = { padding: theme.spacing(3) };\n    colors.forEach(color => {\n        root['& .' + color] = { backgroundColor: color };\n    })\n    console.log(root)\n    return { root: root };\n};\n\nexport const dark = {\n    palette: {\n        type: \"dark\"\n    }\n};\n\n// api functions\nconst url = 'http://www.omdbapi.com/'\nfunction search(title) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            s: title,\n            type: 'series',\n        }\n    })\n        .then(x => x.data.Search || []);\n}\n\nfunction getShow(imdbID) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            i: imdbID,\n        }\n    })\n        .then(x => x.data || []);\n}\n\nfunction getSeason(imdbID, Season) {\n    return axios.get(url, {\n        params: {\n            apikey: '14f8eef1',\n            i: imdbID,\n            Season: Season,\n        }\n    });\n}\n\nfunction getAll(imdbID, totalSeasons) {\n    var requests = [];\n    for (var i = 0; i < totalSeasons; i++){\n        requests.push(\n            getSeason(imdbID, i + 1)\n        );\n    }\n    return axios.all(requests)\n        .then(axios.spread( (...responses) => (\n            responses.map(response => response.data) \n        )));\n}\n\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            rows: [],\n            show: {},\n            seasons: [],\n        }\n    }\n\n    // components\n    Form() {\n        return (\n            <form className=\"comment-form\" onSubmit={this.handleSubmit.bind(this)}>\n                <TextField \n                    label=\"Movie or TV Show\"\n                    required\n                    inputRef={(textarea) => this.body = textarea}\n                />\n            </form>\n        );\n    }\n\n    ImageGridList() {\n        if (!this.state.rows.length) {\n            return <div>No Shows</div>\n        }\n        return (\n            <Grid container spacing={1}>\n                {this.state.rows\n                    .filter(tile => tile.Poster !== 'N/A')\n                    .map((tile) => (\n                        <Grid item onClick={() => this.handleSelect(tile.imdbID)}>\n                            <img src={tile.Poster} alt={tile.Title} width={99} />\n                        </Grid>\n                    )\n                )}\n            </Grid>\n        );\n        \n        <Box component=\"div\" display=\"inline\">inline</Box>\n        return this.state.rows\n            .map((tile) => (\n                <Box component=\"div\" display=\"inline\">\n                    <img src={tile.Poster} alt={tile.Title} width={99} />\n                </Box>\n            ));\n    }\n    \n    DataGridDemo() {\n        var rows = this.state.rows;\n        if (!rows.length){\n            return (\n                <div>\n                    No Rows\n                </div>\n            );\n        }\n    \n        var columns = 'id Title Year'.split(' ').map(key => (\n            {\n                field: key,\n                width: 200,\n            }\n        ));\n        \n        rows.forEach((row, index) => row['id'] = index);\n    \n        const data = {\n            rows: rows,\n            columns: columns,\n            pageSize: 5,\n        };\n        \n        return (\n            <div style={{ height: 400, width: '100%' }}>\n                <DataGrid \n                    rows={rows}\n                    columns={columns}\n                    pageSize={5}\n                    onRowSelected={this.handleSelect.bind(this)}\n                />\n            </div>\n        );\n    }\n    \n    PairGrid() {\n        var columns = 'id key value'.split(' ').map(field => (\n            {\n                field: field\n            }\n        ))\n    \n        var fields = 'Title Year Rated Released Runtime Genre Director Writer Actors Plot Awards'\n        \n        var entries = Object.entries(this.state.show);\n        if (!entries.length){\n            return <div></div>;\n        }\n    \n        entries.splice(14, 1);\n        var rows = entries.map( ( [key, value], id) => (\n            {\n                id: id,\n                key: key,\n                value: value,\n            }\n        ));\n    \n        return (\n            <div style={{ height: 400, width: 300 }}>\n                <DataGrid \n                    rows={rows}\n                    columns={columns}\n                />\n            </div>\n        );\n    }\n    \n    process() {\n        var seasons = this.state.seasons;\n        if (!seasons.length){\n            return false;\n        }\n    \n        var rows = []\n        var numbers = [];\n        seasons.forEach(season => {\n            var row = {};\n            season.Episodes.forEach(episode => {\n                row[episode.Episode] = episode.imdbRating\n            });\n            rows.push(row);\n    \n            numbers.push(\n                Math.max( ...Object.keys(row).map(Number) )\n            );\n        })\n        \n        var width = 77;\n        var max = Math.max( ...numbers );\n        var columns = [{ \n            field: 'id',\n            headerName: 'Season',\n        }]\n        for (var i = 1; i < max + 1; i++){\n            columns.push({\n                field: i,\n                headerName: 'E' + i,\n            });\n        }\n        \n        rows.forEach((row, index) => row['id'] = index + 1);\n    \n        return {\n            rows: rows,\n            columns: columns,\n        };\n    }\n\n    RatingsMap() {\n        const data = this.process();\n        if (!data){\n            return <div></div>;\n        }\n        \n        const { classes } = this.props;\n        return (\n            <Box className={classes.root}>\n                <DataGrid \n                    {...data}\n                    autoHeight\n                    getCellClassName={(params) => {\n                        if (params.field === 'id' || !params.value || isNaN(params.value)) {\n                            return '';\n                        }\n                        for (const [index, color] of colors.entries()) {\n                            if (Number(params.value) >= (9 - index)) {\n                                return color;\n                            }\n                        }\n                        return colors[colors.length - 1];\n                    }}\n                />\n            </Box>\n        );\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={createMuiTheme(dark)}>\n                <CssBaseline />\n                <div>\n                    {this.Form()}\n                    {this.ImageGridList()}\n                    {this.RatingsMap()}\n                </div>\n            </ThemeProvider>\n        );\n    }\n    \n    // hooks\n    handleSubmit(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        search(this.body.value)\n            .then(x => {\n                this.setState({ rows: x });\n            });\n    }\n    \n    handleSelect(imdbID) {\n        getShow(imdbID)\n            .then(x => {\n                this.setState({ show: x });\n\n                getAll(\n                    this.state.show.imdbID,\n                    Number(this.state.show.totalSeasons),\n                )\n                    .then(x => {\n                        this.setState({ seasons: x });\n                    });\n            });        \n    }\n} // end CommentForm component\n\nexport default withStyles(useStyles)(CommentForm);"]},"metadata":{},"sourceType":"module"}